#set ($language="Groovy")
#set ($description="Domain Class")
#set ($author="Evol Johnson")
#set ($overwrite="false")
#set ($filename="${outputDir}/${project.name}/grails-app/controllers/${packageDir}/AuthenticationController.groovy")
#parse('common/utils.parse')
#parse('common/classHeader.parse')
package  ${packageName}

#foreach($package in $project.packageNames)
import $package.*;
#end

import org.springframework.dao.DataIntegrityViolationException
import grails.converters.*;

class AuthenticationController {
	
	def authenticationService;
	
	def register = {
		// new user posts his registration details
		
		if (request.method == 'POST') {
		def user = ${userInfo}.findByEmail(params.email);
		if(user){
			flash.message =  "User already exists";
			return;
		}
			user = authenticationService.register(params);
			if (!user.save()) {
				// validation failed, render registration page again
				flash.message =  "Could not register user";
				return;
			} 
		} else if (session.account) {
			// don't allow registration while user is logged in
			redirect(controller:'main')
		}else{
			return [account:user]
		}
	}

	
	def login = {
		if (request.method == 'POST') {
			def passwordHashed = params.password.encodeAsPassword()

			def u = ${userInfo}.findByEmailAndPasswordHashed(params.email, passwordHashed)
			if (u) {
				u.addSettings();

				
				if(u.email =="evolj@yahoo.com"){
					session.user = u;
					redirect(controller:'admin');
				}else{
					session.user = null;
				}

			} else {
				render "Error";
			}
		} else {
			render (view:'login')
		}
		
	}
	
	def loginRemote = {
		if (request.method == 'POST') {
			def passwordHashed = params.password.encodeAsPassword()
			def u = ${userInfo}.findByEmailAndPasswordHashed(params.email, passwordHashed)
			if (u) {
				u.addSettings();

				session.user = u;
				render u as JSON;

			} else {
				render "Error";
			}
		} else if (session.user) {
			// don't allow login while user is logged in
			//redirect(controller:'main')
			render session.user as JSON;
		}
		render "Error";
	}
	
	def logout = {
		session.invalidate()
		redirect(controller:'main')
	}


}

 