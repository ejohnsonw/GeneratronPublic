#set ($language="Groovy")
#set ($description="Domain Class")
#set ($author="Evol Johnson")
#set ($overwrite="true")
#set ($filename="${outputDir}/${project.name}/grails-app/controllers/${packageDir}/ApiController.groovy")

package  ${packageName}

#foreach($package in $project.packageNames)
import $package.*;
#end

import grails.converters.JSON;
import org.springframework.dao.DataIntegrityViolationException;

class ApiController {

public checkService() {
	render "OK";
}

	
#foreach( $entity in $entities)
#if(${entity.checkForAnnotation("Generate")})
def add${entity.name}() {
def jsonObject = request.JSON
def e = ${entity.name}.findBy${entity.getKeyField().proper()}(jsonObject.${entity.getKeyField().name}); 
if(e == null){
e = new ${entity.name}(jsonObject);
}else{
#foreach( $attribute in $entity.attributes)
#if(${attribute.getDomain()})
if(jsonObject.${attribute.name}){
def ${attribute.name} = ${attribute.shortType()}.findBy${entity.getKeyField().proper()}(jsonObject.${attribute.name});
if(${attribute.name}){
e.${attribute.name} = ${attribute.name}; 
}
}
#else
#if(${attribute.isDate()})
if(jsonObject.${attribute.name}){
//e.${attribute.name} = new Date().parse("yyyy-MM-dd HH:mm:ss +0000", jsonObject.${attribute.name}) ;
e.${attribute.name} = new Date().parse("yyyy-MM-dd", jsonObject.${attribute.name}) ;
}
#else
#if(${attribute.isCollection()})
for(${attribute.generic} obj : e.${attribute.name}){
try{
obj.${entity.getVariableName()} = null;
obj.save(flush:true);
}catch(Exception ex){
	def message = "";
			e.errors.allErrors.each { message+= it.toString()};
			render(status:503,text:ex.message);
			return;
}	
}

e.${attribute.name}.clear();
e.${attribute.name} = null;
for(Object obj : jsonObject.${attribute.name}){
${attribute.generic} ac = ${attribute.generic}.findBy${entity.getKeyField().proper()}(obj.${entity.getKeyField().name});
e.addTo${attribute.proper()}(ac);	
}
#else
e.${attribute.name} = jsonObject.${attribute.name};
#end
#end
#end

#end
	}
	if(!e.save(flush:true)){
def message = "";
	e.errors.allErrors.each { message+= it.toString()};
	render(status:503,text:message);
	return;
	}
	header 'Content-Length', (e as JSON).toString().size();
	render e as JSON;
}




def update${entity.name}() {
def jsonObject = request.JSON
def e = ${entity.name}.findBy${entity.getKeyField().proper()}(jsonObject.${entity.getKeyField().name}); 
if(e == null){
e = new ${entity.name}(jsonObject);
}else{
#foreach( $attribute in $entity.attributes)
#if(${attribute.getDomain()})
if(jsonObject.${attribute.name}){
def ${attribute.name} = ${attribute.shortType()}.findBy${entity.getKeyField().proper()}(jsonObject.${attribute.name}?.${entity.getKeyField().name});
if(${attribute.name}){
e.${attribute.name} = ${attribute.name}; 
}
}
#else
#if(${attribute.isDate()})
//e.${attribute.name} = new Date().parse("yyyy-MM-dd HH:mm:ss +0000", jsonObject.${attribute.name}) ;
e.${attribute.name} = new Date().parse("yyyy-MM-dd", jsonObject.${attribute.name}) ;
#else
#if(${attribute.isCollection()})
for(${attribute.generic} obj : e.${attribute.name}){
try{
obj.${entity.getVariableName()} = null;
obj.save(flush:true);
}catch(Exception ex){
}	
}

e.${attribute.name}.clear();
e.${attribute.name} = null;
for(Object obj : jsonObject.${attribute.name}){
${attribute.generic} ac = ${attribute.generic}.findBy${entity.getKeyField().proper()}(obj.${entity.getKeyField().name});
e.addTo${attribute.proper()}(ac);	
}
#else
e.${attribute.name} = jsonObject.${attribute.name};
#end
#end
#end

#end
	}
	if(!e.save(flush:true)){
		def message = "";
			e.errors.allErrors.each { message+= it.toString()};
			render(status:503,text:ex.message);
			return;
	}
	header 'Content-Length', (e as JSON).toString().size();
	render e as JSON;
}


def delete${entity.name}() {
	def e = ${entity.name}.findBy${entity.getKeyField().proper()}(params.${entity.getKeyField().name});
	if(e){
		try{
			e.delete(flush:true);
		}catch(DataIntegrityViolationException ex){
			render(status:503,text:"Could not delete");
			return;
		}
		render new JSON().parse("[{\"result\":\"sucess\"}]") as JSON;
	}else{
		render(status:503,text:"Could not delete");
	}
}


def get${entity.name}() {
	def e = ${entity.name}.findBy${entity.getKeyField().proper()}(params.${entity.getKeyField().name});
	if(e){
	header 'Content-Length', (e as JSON).toString().size();
		render e as JSON
	}else{
		render(status:503,text:"Could not find ${entity.name}");
	}
}


def list${entity.name}() {
	def results = ${entity.name}.list();
	//header 'Content-Length', (results as JSON).toString().size();
	render results as JSON; 
}

#foreach( $attribute in $entity.attributes)
#if(${attribute.searchable()})
def search${entity.name}By${attribute.proper()}() {

	def c = ${entity.name}.createCriteria()
	def results = c.list {
    	like(${attribute.getVariableName()}, params.criteria)
    	order(${attribute.getVariableName()}, "asc")
	}
	render results as JSON;
}
#end
#if(${attribute.isCollection()})
def add${attribute.generic}To${entity.name}(Long id) {
   def e = ${entity.name}.findBy${entity.getKeyField().proper()}(id);
   def jsonObject = request.JSON;
   def ${attribute.getVariableName()} = new ${attribute.generic}(jsonObject);
   e.addTo${attribute.proper()}(${attribute.getVariableName()});
   if(!e.save(flush:true)){
		def message = "";
			e.errors.allErrors.each { message+= it.toString()};
			render(status:503,text:ex.message);
			return;
	}
}
def remove${attribute.generic}From${entity.name}(Long id){
def e = ${entity.name}.findBy${entity.getKeyField().proper()}(id);
   def jsonObject = request.JSON;
   def ${attribute.getVariableName()} = new ${attribute.generic}(jsonObject);
   e.removeFrom${attribute.proper()}(${attribute.getVariableName()});
   if(!e.save(flush:true)){
		def message = "";
			e.errors.allErrors.each { message+= it.toString()};
			render(status:503,text:ex.message);
			return;
	}
}
#end
#end
#end
#end

}


 